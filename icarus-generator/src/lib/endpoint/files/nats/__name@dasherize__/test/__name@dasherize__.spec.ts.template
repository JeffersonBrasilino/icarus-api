import * as request from "supertest";
import {INestApplication, ValidationPipe} from "@nestjs/common";
import {Test, TestingModule} from "@nestjs/testing";
import {<%= classify(name) %>Module} from "@applications/<%= route %>/<%= dasherize(name) %>.module";
import {Observable} from "rxjs";

const baseRoute = '<%= route %>';
//dados da requisicao(post,put) registrar aqui
const dataRequest = {}

let app: INestApplication;
let token!: string;
const mockRepo = {
    send: (pattern, data) => {
        let statusCode = 'OK';
        const rgx = new RegExp(/^[A-Z]+\:/);
        const type = pattern.match(rgx);

        if (['SAVE:'].indexOf(type[0]) !== -1)
            statusCode = 'CREATED';

        if(
            (['LIST:'].indexOf(type[0]) !== -1 && data?.filter == 'not_found') ||
            (['GET:'].indexOf(type[0]) !== -1 && data?.id == 9999)
        )
            statusCode = 'NOT_FOUND';

        return new Observable(s => s.next({status: statusCode, data: []}));
    },

    emit: (pattern, data) => {
        let statusCode = 'OK';
        const rgx = new RegExp(/^[A-Z]+\:/);
        const type = pattern.match(rgx);

        if (['SAVE:'].indexOf(type[0]) !== -1)
            statusCode = 'CREATED';

        if(
            (['LIST:'].indexOf(type[0]) !== -1 && data?.filter == 'not_found') ||
            (['GET:'].indexOf(type[0]) !== -1 && data?.id == 9999)
        )
            statusCode = 'NOT_FOUND';

        return new Observable(s => s.next({status: statusCode, data: []}));
    }
};

beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
        imports: [<%= classify(name) %>Module],
    })
        .overrideProvider('NATS_CLIENT')
        .useValue(mockRepo)
        .compile();

    app = moduleFixture.createNestApplication();
    app.useGlobalPipes(new ValidationPipe());
    await app.init();

});

describe(`LIST ${baseRoute}`, () => {

    it(`quando acessar a LISTAGEM, listar e retornar 200`, () => {
        return request(app.getHttpServer())
            .get(baseRoute)
            .set('Accept', 'application/json')
            .expect(200)
    });

    it(`quando acessar a LISTAGEM com filtros que nao existem registro, retornar 404`, () => {
        return request(app.getHttpServer())
            .get(`${baseRoute}?filter=not_found`)
            .set('Accept', 'application/json')
            .expect(404)
    });
})

describe(`GET ${baseRoute}`, () => {
    it(`quando acessar um id que existe , retornar 200`, () => {
        return request(app.getHttpServer())
            .get(`${baseRoute}/3`)
            .set('Accept', 'application/json')
            .expect(200)
            .expect((res) => {
                expect(Object.keys(res.body)).toEqual(['status', 'data']);
            })
    });

    it(`quando acessar um id NÃƒO que existe , retornar 404`, () => {
        return request(app.getHttpServer())
            .get(`${baseRoute}/9999`)
            .set('Accept', 'application/json')
            .expect(404)
            .expect((res) => {
                expect(Object.keys(res.body)).toEqual(['status', 'data']);
            })
    });
});

describe(`SAVE ${baseRoute}`, () => {
    it('quando tentar salvar os dados com dados enviados, retorna 201', () => {
        return request(app.getHttpServer())
            .post(baseRoute)
            .send(dataRequest)
            .set('Accept', 'application/json')
            .expect(201)
            .expect((res) => {
                expect(Object.keys(res.body)).toEqual(['status', 'data']);
            })
    });

    it('quando tentar salvar sem dados enviados retorna 400', () => {
        return request(app.getHttpServer())
            .post(baseRoute)
            .set('Accept', 'application/json')
            .expect(400)
    })
});

describe(`UPDATE ${baseRoute}`, () => {
    it('quando tentar atualizar os dados com dados enviados, retorna 200', () => {
        return request(app.getHttpServer())
            .put(`${baseRoute}/3`)
            .send(dataRequest)
            .set('Accept', 'application/json')
            .expect(200)
            .expect((res) => {
                expect(Object.keys(res.body)).toEqual(['status', 'data']);
            })
    });

    it('quando tentar atualizar sem dados enviados retorna 400', () => {
        return request(app.getHttpServer())
            .put(`${baseRoute}/3`)
            .set('Authorization', `Bearer ${token}`)
            .set('Accept', 'application/json')
            .expect(400)
    });

    it('quando tentar atualizar com dados enviados e sem ID retorna 404', () => {
        return request(app.getHttpServer())
            .put(baseRoute)
            .send(dataRequest)
            .set('Accept', 'application/json')
            .expect(404)
    });
});

describe(`DELETE ${baseRoute}`, () => {
    it('quando tentar deletar com ID, retorna 200', () => {
        return request(app.getHttpServer())
            .delete(`${baseRoute}/3`)
            .set('Accept', 'application/json')
            .expect(200)
            .expect((res) => {
                expect(Object.keys(res.body)).toEqual(['status', 'data']);
            })
    });

    it('quando tentar deletar sem ID, retorna 404', () => {
        return request(app.getHttpServer())
            .delete(`${baseRoute}`)
            .set('Accept', 'application/json')
            .expect(404)
    });
});

afterAll(async () => {
    await app.close();
});
