import {INestApplication, ValidationPipe} from "@nestjs/common";
import {Test, TestingModule} from "@nestjs/testing";
import {AppModule} from "../../../../app.module";
import * as request from "supertest";

describe('GET user (e2e)', () => {
    let app: INestApplication;
    let token!: string;
    beforeAll(async () => {
        const moduleFixture: TestingModule = await Test.createTestingModule({
            imports: [AppModule],
        }).compile();
        app = moduleFixture.createNestApplication();
        app.useGlobalPipes(new ValidationPipe());
        await app.init();

        //login para as rotas autenticadas
        const login = await request(app.getHttpServer())
            .post('/auth/login')
            .send({
                username: "jefferson.brasilino",
                password: '123456',
                applicationId: 'hue'
            });
        token = login.body.data;

    });


    it(`quando acessar um id que existe , retornar 200`, () => {
        return request(app.getHttpServer())
            .get('/administration/users/3')
            .set('Authorization', `Bearer ${token}`)
            .set('Accept', 'application/json')
            .expect(200)
            .expect((res) => {
                expect(Object.keys(res.body)).toEqual(['status', 'data']);
            })
    });

    it(`quando acessar um id NÃƒO que existe , retornar 404`, () => {
        return request(app.getHttpServer())
            .get('/administration/users/123584128486521')
            .set('Authorization', `Bearer ${token}`)
            .set('Accept', 'application/json')
            .expect(404)
            .expect((res) => {
                expect(Object.keys(res.body)).toEqual(['status', 'data']);
            })
    });

    afterAll(async () => {
        await app.close();
    });
})